package pl.edu.pwr.healthycar.service.service

import org.bson.types.ObjectId
import pl.edu.pwr.healthycar.api.model.Reading
import pl.edu.pwr.healthycar.api.model.Ride
import pl.edu.pwr.healthycar.persistence.repository.RideRepository
import spock.lang.Specification

import java.time.LocalDateTime

class RideServiceTest extends Specification {

    def rideRepository = Mock(RideRepository)
    def rideService = new RideService(rideRepository: rideRepository)

    def rideId = '6558c44e3da3080fcf9da95a'
    def userId = '6558c44eaecff28d670c45df'
    def carId = '6558c44e215f7deeb2ec2ed7'

    def 'should find and return all rides from db'() {
        given:
        def ride1 = Mock(Ride)
        def ride2 = Mock(Ride)
        def rides = [ride1, ride2]

        when:
        def result = rideService.getAll()

        then:
        1 * rideRepository.findAll() >> rides
        0 * _

        and:
        result == rides
    }

    def 'should find and return ride with given id from db - success'() {
        given:
        def ride = Mock(Ride)
        def rideOptional = Optional.of(ride)

        when:
        def result = rideService.getOne(rideId)

        then:
        1 * rideRepository.findById(new ObjectId(rideId)) >> rideOptional
        0 * _

        and:
        result == ride
    }

    def 'should find and return ride with given id from db - fail'() {
        given:
        def rideOptional = Optional.empty()

        when:
        def result = rideService.getOne(rideId)

        then:
        1 * rideRepository.findById(new ObjectId(rideId)) >> rideOptional
        0 * _

        and:
        result == null
    }

    def 'should find and return rides of given user from db'() {
        given:
        def ride1 = Mock(Ride)
        def ride2 = Mock(Ride)
        def rides = [ride1, ride2]

        when:
        def result = rideService.getUserRides(userId)

        then:
        1 * rideRepository.findAllByUserId(userId) >> rides
        0 * _

        and:
        result == rides
    }

    def 'should find and return latest ride of given car from db - ride'() {
        given:
        def ride1 = Ride.builder()
                .date(LocalDateTime.now()).build()
        def ride2 = Ride.builder()
                .date(LocalDateTime.now().plusDays(1)).build()
        def rides = [ride1, ride2]

        when:
        def result = rideService.getLatestCarRide(carId)

        then:
        1 * rideRepository.findAllByCarId(carId) >> rides
        0 * _

        and:
        result == ride2
    }

    def 'should find and return latest ride of given car from db - no ride'() {
        given:
        def rides = []

        when:
        def result = rideService.getLatestCarRide(carId)

        then:
        1 * rideRepository.findAllByCarId(carId) >> rides
        0 * _

        and:
        result == null
    }

    def 'should update ride and return saved ride'() {
        given:
        def ride = Ride.builder()
                .id(rideId)
                .readings([]).build()
        def rideOptional = Optional.of(ride)
        def newRide = Ride.builder()
                .id(rideId)
                .readings([Mock(Reading)]).build()

        when:
        def result = rideService.upsert(newRide)

        then:
        1 * rideRepository.findById(rideId) >> rideOptional
        1 * rideRepository.save(newRide) >> newRide
        0 * _

        and:
        result == newRide
    }

    def 'should insert new ride and return saved ride'() {
        given:
        def rideOptional = Optional.empty()
        def newRide = Ride.builder()
                .id(rideId).build()

        when:
        def result = rideService.upsert(newRide)

        then:
        1 * rideRepository.findById(rideId) >> rideOptional
        1 * rideRepository.save(newRide) >> newRide
        0 * _

        and:
        result == newRide
    }

    def 'should insert new report with autogenerated id and return saved report'() {
        given:
        def newRide = Ride.builder().build()

        when:
        def result = rideService.upsert(newRide)

        then:
        1 * rideRepository.findById(null) >> { throw new IllegalArgumentException() }
        1 * rideRepository.save(newRide) >> newRide
        0 * _

        and:
        result == newRide
    }

    def 'should delete ride with given id from db - success'() {
        given:
        def ride = Mock(Ride)
        def rideOptional = Optional.of(ride)
        def deleteResult = 'Ride with ID 6558c44e3da3080fcf9da95a deleted successfully.'

        when:
        def result = rideService.delete(rideId)

        then:
        1 * rideRepository.findById(new ObjectId(rideId)) >> rideOptional
        1 * rideRepository.deleteById(rideId)
        0 * _

        and:
        result == deleteResult
    }

    def 'should delete ride with given id from db - fail'() {
        given:
        def rideOptional = Optional.empty()
        def deleteResult = 'Ride with ID 6558c44e3da3080fcf9da95a is not present in DB.'

        when:
        def result = rideService.delete(rideId)

        then:
        1 * rideRepository.findById(new ObjectId(rideId)) >> rideOptional
        0 * _

        and:
        result == deleteResult
    }
}
