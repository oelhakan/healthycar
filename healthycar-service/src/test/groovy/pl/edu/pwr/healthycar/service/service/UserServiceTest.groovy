package pl.edu.pwr.healthycar.service.service

import org.bson.types.ObjectId
import org.springframework.mail.javamail.JavaMailSender
import org.springframework.web.server.ResponseStatusException
import pl.edu.pwr.healthycar.api.model.LoginInfo
import pl.edu.pwr.healthycar.api.model.User
import pl.edu.pwr.healthycar.persistence.repository.UserRepository
import spock.lang.Specification

class UserServiceTest extends Specification {

    def userRepository = Mock(UserRepository)
    def emailSender = Mock(JavaMailSender)
    def userService = new UserService(userRepository: userRepository,
    emailSender: emailSender)

    def 'should find and return all users from db'(){
        given:
        def user1 = Mock(User)
        def user2 = Mock(User)
        def users = [user1, user2]

        when:
        def result = userService.getUsers()

        then:
        1 * userRepository.findAll() >> users
        0 * _

        and:
        result == users
    }

    def 'should find and return user with given id from db - success'(){
        given:
        def userId = "6558c44eaecff28d670c45df"
        def user = Mock(User)
        def userOptional = Optional.of(user)

        when:
        def result = userService.getUser(userId)

        then:
        1 * userRepository.findById(new ObjectId(userId)) >> userOptional
        0 * _

        and:
        result == user
    }

    def 'should find and return user with given id from db - fail'(){
        given:
        def userId = "6558c44eaecff28d670c45df"
        def userOptional = Optional.empty()

        when:
        def result = userService.getUser(userId)

        then:
        1 * userRepository.findById(new ObjectId(userId)) >> userOptional
        0 * _

        and:
        result == null
    }

    def 'should insert new user and return saved user'(){
        given:
        def userId = "6558c44eaecff28d670c45df"
        def userOptional = Optional.empty()
        def newUser = User.builder().id(userId).build()

        when:
        def result = userService.upsertUser(newUser)

        then:
        1 * userRepository.findById(userId) >> userOptional
        1 * userRepository.save(newUser) >> newUser
        0 * _

        and:
        result == newUser
    }

    def 'should insert new user with autogenerated id and return saved user'(){
        given:
        def newUser = User.builder().build()

        when:
        def result = userService.upsertUser(newUser)

        then:
        1 * userRepository.findById(null) >> { throw new IllegalArgumentException() }
        1 * userRepository.save(newUser) >> newUser
        0 * _

        and:
        result == newUser
    }

    def 'should update user and return saved user'(){
        given:
        def userId = "6558c44eaecff28d670c45df"
        def user = User.builder()
                .id(userId)
                .firstName("Onur")
                .build()
        def userOptional = Optional.of(user)
        def newUser = User.builder()
                .id(userId)
                .firstName("Atahan")
                .build()

        when:
        def result = userService.upsertUser(newUser)

        then:
        1 * userRepository.findById(userId) >> userOptional
        1 * userRepository.save(newUser) >> newUser
        0 * _

        and:
        result == newUser
    }

    def 'should delete user with given id from db - success'(){
        given:
        def userId = "6558c44eaecff28d670c45df"
        def user = Mock(User)
        def userOptional = Optional.of(user)
        def deleteResult = "User with ID 6558c44eaecff28d670c45df deleted successfully."

        when:
        def result = userService.deleteUser(userId)

        then:
        1 * userRepository.findById(new ObjectId(userId)) >> userOptional
        1 * userRepository.deleteById(userId)
        0 * _

        and:
        result == deleteResult
    }

    def 'should delete user with given id from db - fail'(){
        given:
        def userId = "6558c44eaecff28d670c45df"
        def userOptional = Optional.empty()
        def deleteResult = "User with ID 6558c44eaecff28d670c45df is not present in DB."

        when:
        def result = userService.deleteUser(userId)

        then:
        1 * userRepository.findById(new ObjectId(userId)) >> userOptional
        0 * _

        and:
        result == deleteResult
    }

    def 'should log in and return user if user exists and password is correct'(){
        given:
        def email = "atahanergurhan@bunga.com"
        def password = "somerandompass1"
        def hashedPassword = "\$2a\$10\$hRSHV4c5Q0FRrXkNA9YtU.yLNzkLrM0xod6iCevxLWfaxBgBRP5L6"
        def loginInfo = LoginInfo.builder()
                .email(email)
                .password(password)
                .build()
        def user = User.builder().email(email).password(hashedPassword).build()
        def userOptional = Optional.of(user)

        when:
        def result = userService.login(loginInfo)

        then:
        1 * userRepository.findByEmail(email) >> userOptional
        0 * _

        and:
        result == user
    }

    def 'should throw exception if user exists but password is incorrect'(){
        given:
        def email = "atahanergurhan@bunga.com"
        def password = "somerandompass123"
        def hashedPassword = "\$2a\$10\$hRSHV4c5Q0FRrXkNA9YtU.yLNzkLrM0xod6iCevxLWfaxBgBRP5L6"
        def loginInfo = LoginInfo.builder()
                .email(email)
                .password(password)
                .build()
        def user = User.builder().email(email).password(hashedPassword).build()
        def userOptional = Optional.of(user)

        when:
        def result = userService.login(loginInfo)

        then:
        1 * userRepository.findByEmail(email) >> userOptional
        def exception = thrown(ResponseStatusException)
        exception.message == "401 UNAUTHORIZED \"Passwords do not match!\""
        0 * _

        and:
        result == null
    }

    def 'should throw exception if user logging in does not exist'(){
        given:
        def email = "atahanerkgurhan@bunga.com"
        def password = "somerandompass123"
        def loginInfo = LoginInfo.builder()
                .email(email)
                .password(password)
                .build()
        def userOptional = Optional.empty()

        when:
        def result = userService.login(loginInfo)

        then:
        1 * userRepository.findByEmail(email) >> userOptional
        def exception = thrown(ResponseStatusException)
        exception.message == "401 UNAUTHORIZED \"No user found with email atahanerkgurhan@bunga.com!\""
        0 * _

        and:
        result == null
    }

    def 'should reset password and send email if user exists'(){
        given:
        def email = "atahanergurhan@bunga.com"
        def user = User.builder().email(email).build()
        def userOptional = Optional.of(user)

        when:
        def result = userService.resetPassword(email)

        then:
        1 * userRepository.findByEmail(email) >> userOptional
        1 * userRepository.save(_)
        1 * emailSender.send(_)
        0 * _

        and:
        result == "Password reset successful for user atahanergurhan@bunga.com. Your new password has been sent to your email."
    }

    def 'should throw exception if resetting user does not exist'(){
        given:
        def email = "atahanerkgurhan@bunga.com"
        def userOptional = Optional.empty()

        when:
        def result = userService.resetPassword(email)

        then:
        1 * userRepository.findByEmail(email) >> userOptional
        def exception = thrown(ResponseStatusException)
        exception.message == "401 UNAUTHORIZED \"No user found with email atahanerkgurhan@bunga.com!\""
        0 * _

        and:
        result == null
    }
}
