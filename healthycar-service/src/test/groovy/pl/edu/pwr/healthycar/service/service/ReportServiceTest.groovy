package pl.edu.pwr.healthycar.service.service

import org.bson.types.ObjectId
import pl.edu.pwr.healthycar.api.model.Report
import pl.edu.pwr.healthycar.persistence.repository.ReportRepository
import spock.lang.Specification

class ReportServiceTest extends Specification {

    def reportRepository = Mock(ReportRepository)
    def reportService = new ReportService(reportRepository: reportRepository)

    def 'should find and return all reports from db'(){
        given:
        def report1 = Mock(Report)
        def report2 = Mock(Report)
        def reports = [report1, report2]

        when:
        def result = reportService.getReports()

        then:
        1 * reportRepository.findAll() >> reports
        0 * _

        and:
        result == reports
    }

    def 'should find and return report with given id from db - success'(){
        given:
        def reportId = "65689b42444cbf0c24cabcf5"
        def report = Mock(Report)
        def reportOptional = Optional.of(report)

        when:
        def result = reportService.getReport(reportId)

        then:
        1 * reportRepository.findById(new ObjectId(reportId)) >> reportOptional
        0 * _

        and:
        result == report
    }

    def 'should find and return report with given id from db - fail'(){
        given:
        def reportId = "65689b42444cbf0c24cabcf5"
        def reportOptional = Optional.empty()

        when:
        def result = reportService.getReport(reportId)

        then:
        1 * reportRepository.findById(new ObjectId(reportId)) >> reportOptional
        0 * _

        and:
        result == null
    }

    def 'should find and return reports of given car from db'(){
        given:
        def carId = "6558c44e215f7deeb2ec2ed7"
        def report1 = Mock(Report)
        def report2 = Mock(Report)
        def reports = [report1, report2]

        when:
        def result = reportService.getCarReports(carId)

        then:
        1 * reportRepository.findAllByCarId(carId) >> reports
        0 * _

        and:
        result == reports
    }

    def 'should update report and return saved report'(){
        given:
        def reportId = "65689b42444cbf0c24cabcf5"
        def report = Report.builder()
                .id(reportId)
        .averageSpeed(43.2)
        .build()
        def reportOptional = Optional.of(report)
        def newReport = Report.builder()
                .id(reportId)
                .averageSpeed(46.2)
        .build()

        when:
        def result = reportService.upsertReport(newReport)

        then:
        1 * reportRepository.findById(reportId) >> reportOptional
        1 * reportRepository.save(newReport) >> newReport
        0 * _

        and:
        result == newReport
    }

    def 'should insert new report and return saved report'(){
        given:
        def reportId = "65689b42444cbf0c24cabcf5"
        def reportOptional = Optional.empty()
        def newReport = Report.builder()
                .id(reportId)
                .averageSpeed(46.2)
                .build()

        when:
        def result = reportService.upsertReport(newReport)

        then:
        1 * reportRepository.findById(reportId) >> reportOptional
        1 * reportRepository.save(newReport) >> newReport
        0 * _

        and:
        result == newReport
    }

    def 'should insert new report with autogenerated id and return saved report'(){
        given:
        def newReport = Report.builder()
                .averageSpeed(46.2)
                .build()

        when:
        def result = reportService.upsertReport(newReport)

        then:
        1 * reportRepository.findById(null) >> { throw new IllegalArgumentException() }
        1 * reportRepository.save(newReport) >> newReport
        0 * _

        and:
        result == newReport
    }

    def 'should delete report with given id from db - success'(){
        given:
        def reportId = "6558c44e215f7deeb2ec2ed7"
        def report = Mock(Report)
        def reportOptional = Optional.of(report)
        def deleteResult = "Report with ID 6558c44e215f7deeb2ec2ed7 deleted successfully."

        when:
        def result = reportService.deleteReport(reportId)

        then:
        1 * reportRepository.findById(new ObjectId(reportId)) >> reportOptional
        1 * reportRepository.deleteById(reportId)
        0 * _

        and:
        result == deleteResult
    }

    def 'should delete report with given id from db - fail'(){
        given:
        def reportId = "6558c44e215f7deeb2ec2ed7"
        def reportOptional = Optional.empty()
        def deleteResult = "Report with ID 6558c44e215f7deeb2ec2ed7 is not present in DB."

        when:
        def result = reportService.deleteReport(reportId)

        then:
        1 * reportRepository.findById(new ObjectId(reportId)) >> reportOptional
        0 * _

        and:
        result == deleteResult
    }
}
